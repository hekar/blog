{"pageProps":{"post":{"title":"Electron, Vue.js and Vuetify Guide","date":"2019-08-23","slug":"2019-08-23-electron-vue","content":"<p>This post is a quick tutorial on how to create an electron-vue] application with the vuetify library. The resulting application will bundles into Windows, macOS and Linux binaries.</p>\n<hr>\n<p>Disclaimer: The included version of <a href=\"https://electronjs.org\">electron</a> with <a href=\"https://github.com/SimulatedGREG/electron-vue\">electron-vue</a> is rather dated. There are defects in the version of electron shipped with electron-vue. Upgrading the version of electron is a difficult undertaking and may not be worthwhile. The end of this post contains links to various resources that can provide more update to date environments. Updating electron can be important if you are building a security sensitive application or using the application to browse external websites.</p>\n<p>If you want to skip the tutorial and simply download the template, it can be found here: <a href=\"https://github.com/hekar/electron-vue-starter\">https://github.com/hekar/electron-vue-starter</a></p>\n<h3>Dependencies</h3>\n<p>Install <a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a> and <a href=\"https://madewithvuejs.com/electron-vue\">electron-vue</a> to get started</p>\n<pre><code class=\"hljs language-sh\">npm install -g vue-cli\nvue init simulatedgreg/electron-vue electron-vue-starter\n\nnpm install -g yarn\n<span class=\"hljs-built_in\">cd</span> electron-vue-starter\nyarn install\n</code></pre>\n<h3>Vuetify</h3>\n<p>Add the dependency for vuetify 2.x and material design fonts</p>\n<pre><code>yarn add vuetify@^2.0.1 @mdi/font\n</code></pre>\n<p>Edit <code>src/renderer/main.js</code> to use include Vuetify in the list of plugins</p>\n<p>Add the following</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Vuetify</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'vuetify'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'@mdi/font/css/materialdesignicons.min.css'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'vuetify/dist/vuetify.min.css'</span>\n\n<span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-title function_\">use</span>(<span class=\"hljs-title class_\">Vuetify</span>)\n\n<span class=\"hljs-keyword\">const</span> vue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>({\n  ...\n  <span class=\"hljs-attr\">vuetify</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vuetify</span>({})\n})\n</code></pre>\n<h3>Vuetify theme</h3>\n<p>Default to the light theme by disabling dark mode</p>\n<p>Edit <code>src/renderer/App.vue</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"electron-vue-starter\"</span>,\n  <span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$vuetify</span>.<span class=\"hljs-property\">theme</span>.<span class=\"hljs-property\">dark</span> = <span class=\"hljs-literal\">false</span>;\n  },\n};\n</code></pre>\n<h3>Whitelist Vuetify</h3>\n<p>This is the easiest step to overlook. Add <code>vuetify</code> to the <code>whiteListedModules</code> list, so that it will be included in the webpack bundle.</p>\n<p>Edit <code>.electron-vue/webpack.renderer.config.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> whiteListedModules = [<span class=\"hljs-string\">\"vue\"</span>, <span class=\"hljs-string\">\"vuetify\"</span>];\n</code></pre>\n<h3>Start</h3>\n<pre><code>yarn run dev\n</code></pre>\n<p>Debug using port 5858 in Google Chrome or Node Inspector for the server side portion of the application or press <code>Shift + Ctrl + I</code> for internal devtools in Electron for editing the web rendering portion.</p>\n<h3>First view</h3>\n<p>Edit <code>src/renderer/components/LandingPage.vue</code></p>\n<p>Replace</p>\n<pre><code class=\"hljs language-js\">&#x3C;div id=<span class=\"hljs-string\">\"wrapper\"</span>>...&#x3C;/div>\n</code></pre>\n<p>With</p>\n<pre><code class=\"hljs language-js\">&#x3C;div id=<span class=\"hljs-string\">\"wrapper\"</span>>\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">v-card</span> <span class=\"hljs-attr\">max-width</span>=<span class=\"hljs-string\">\"344\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"mx-auto\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">v-card-title</span>></span>My First electron-vue App<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">v-card-title</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">v-card-text</span>></span>This is awesome!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">v-card-text</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">v-card-actions</span>></span>\n      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">v-btn</span> <span class=\"hljs-attr\">text</span>></span>Click Here<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">v-btn</span>></span>\n    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">v-card-actions</span>></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">v-card</span>></span></span>\n&#x3C;/div>\n</code></pre>\n<h3>Package</h3>\n<pre><code class=\"hljs language-sh\">yarn run build\n</code></pre>\n<p>The results of the build process will be visible in <code>./build/</code> and will depend on your platform. Cross platform compilation is not supported, so you will need the target operating system to compile that release.</p>\n<p>Supported target formats are:</p>\n<ul>\n<li><strong>All platforms:</strong> 7z, zip, tar.xz, tar.lz, tar.gz, tar.bz2, dir (unpacked directory).</li>\n<li><strong>Windows:</strong> nsis (Installer), nsis-web (Web installer), portable (portable app without installation), AppX (Windows Store), Squirrel.Windows.</li>\n<li><strong>Linux:</strong> AppImage, snap, debian package (deb), rpm, freebsd, pacman, p5p, apk.</li>\n<li><strong>macOS:</strong> dmg, pkg, mas, mas-dev.</li>\n</ul>\n<p>From the <a href=\"https://www.electron.build\">electron-builder</a> documentation</p>\n<h3>Conclusion</h3>\n<p>Getting started with electron-vue and vuetify is fairly simple, though there are issues that require workarounds. Changes such as adding the vuetify module to the <code>whitelist</code> collection are easy to miss. <a href=\"https://madewithvuejs.com/electron-vue\">electron-vue</a> is a little out of date, so in a follow up post, I will go over how to configure electron, <a href=\"https://www.electron.build\">electron-builder</a>, <a href=\"https://github.com/vuejs/vue\">vue</a> and <a href=\"https://vuetifyjs.com\">vuetify</a> from scratch. I will also go over <a href=\"https://github.com/michalzaq12/electron-nuxt\">electron-nuxt</a> which is a project looking to replace <a href=\"https://madewithvuejs.com/electron-vue\">electron-vue</a>.</p>\n<p>For now, <a href=\"https://madewithvuejs.com/electron-vue\">electron-vue</a> is still a great project and highly recommended for users that wish to quickly create desktop applications with <a href=\"https://electronjs.org\">electron</a>, <a href=\"https://github.com/vuejs/vue\">vue</a> and <a href=\"https://vuetifyjs.com\">vuetify</a>.</p>"}},"__N_SSG":true}