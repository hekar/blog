{"pageProps":{"post":{"title":"Scoped Packages with npm-link","date":"2016-04-25","slug":"2016-04-25-npm-scoped-packages","content":"<p>In the past few months, I have noticed that <code>npm link</code> and scoped packages have gone underused by my colleagues.\nThe <code>npm link</code> command is essential for quick development. And if you're building private packages inside an organization, scoped packages can make managing and installing packages much simpler.</p>\n<p>Before we can do anything, we need a scoped package. Fortunately, it's as simple as naming the package in the following format: <code>@&#x3C;scope>/&#x3C;package></code>.</p>\n<hr>\n<p>For example, in <code>package.json</code>:</p>\n<pre><code>{\n  \"name\": \"@mycompany/fast-lib\"\n  // ...\n}\n</code></pre>\n<p>Sometimes you want to make changes to a dependency while working on an application. This means you have both repositories on your local machine and are making modifications. You could manually sync them using <code>npm install</code>, but there's an easier way. Create a symbolic link using <code>npm link</code>.</p>\n<p>The synopsis from the <code>npm</code> documentation states that the npm link command only takes a single argument. The name of the [scoped] package.</p>\n<pre><code>npm link (in package dir)\nnpm link [&#x3C;@scope>/]&#x3C;pkg>[@&#x3C;version>]\n\nalias: npm ln\n</code></pre>\n<p>Using <code>npm link</code> is easier than it seems. You do not need to chdir outside your project's folder.</p>\n<p>To link a scoped package to a project:</p>\n<pre><code>npm link &#x3C;path-to-dependency> @scope/&#x3C;package>[@version]\n</code></pre>\n<p>Same goes for non-scoped packages:</p>\n<pre><code>npm link &#x3C;path-to-dependency> &#x3C;package>[@version]\n</code></pre>\n<p><code>@version</code> is optional.</p>\n<p>Example:</p>\n<pre><code>npm link ../fast-lib @mycompany/fast-lib@1.0.0\n</code></pre>\n<p>To validate that it worked, check the folder in <code>node_modules/</code> to make sure it's a symlink and points to the correct folder.</p>\n<pre><code>ls -l node_modules/@scope/&#x3C;package>\n# or\nls -l node_modules/&#x3C;package>\n</code></pre>\n<p>You should see a reference to the folder containing the project.</p>\n<p>To use a private npm registry for your scoped packages, you need to setup an <code>.npmrc</code>. This does not apply if you're using <a href=\"https://www.npmjs.com/npm/private-packages\">npmjs.com</a>. See their <a href=\"https://docs.npmjs.com/orgs/what-are-orgs\">documentation</a> for details.</p>\n<p>Getting authenticated with your respective npm registry is different depending on where your packages are hosted. The configuration of the <code>.npmrc</code> is always the same though.</p>\n<pre><code>@&#x3C;scope>:registry=https://&#x3C;your-npm-registry>/\n//&#x3C;your-npm-registry>/:_password=&#x3C;password-base-64>\n//&#x3C;your-npm-registry>/:username=&#x3C;username>\n//&#x3C;your-npm-registry>/:email=&#x3C;email>\n//&#x3C;your-npm-registry>/:always-auth=true\n</code></pre>\n<p>The <code>.npmrc</code> is read from the following locations in the order:</p>\n<ol>\n<li>per-project config file (/path/to/my/project/.npmrc)</li>\n<li>per-user config file (~/.npmrc)</li>\n<li>global config file ($PREFIX/etc/npmrc)</li>\n<li>npm builtin config file (/path/to/npm/npmrc)</li>\n</ol>\n<p>That's all you need to know about <code>npm link</code> and a primer on <a href=\"https://docs.npmjs.com/misc/scope\">scoped packages</a>.</p>\n"}},"__N_SSG":true}